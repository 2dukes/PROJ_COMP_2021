options {
    LOOKAHEAD = 1;
    FORCE_LA_CHECK = true;
}

PARSER_BEGIN(JMM)

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import pt.up.fe.comp.jmm.report.Report;
import pt.up.fe.comp.jmm.report.ReportType;
import pt.up.fe.comp.jmm.report.Stage;
import java.util.List;

public class JMM {
    public static void main(String[] args) throws ParseException, FileNotFoundException {
        JMM jmm = new JMM(new FileInputStream(args[0]));
        SimpleNode root = jmm.Program(); // returns reference to root node

        root.dump(""); // prints the tree on the screen
    }
}

PARSER_END(JMM)

SKIP : {
    " " | "\r" | "\t" | "\n" | < "//" (~["\r", "\n"])* >
    | "/*" : ML_COMMENT_STATE
}

<ML_COMMENT_STATE> SKIP :
{
    "*/" : DEFAULT
    | < ~[] >
}

TOKEN : {
    <IMPORT: "import">
    | <CLASS: "class">
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <IDENTIFIER: (["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])+ | ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])*)>
    | <INTEGER_LITERAL: ["0"-"9"](["0"-"9"])*>
    | <ASSIGN: "=">
    | <LBR: "{">
    | <RBR: "}">
    | <LSQBR: "[">
    | <RSQBR: "]">
    | <LPAR: "(">
    | <RPAR: ")">
    | <DOT: ".">
    | <COMMA: ",">
    | <SEMICOLON: ";">
    | <AND: "&&">
    | <LT: "<">
    | <ADD: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <NOT: "!">
}

SimpleNode Program() : {} {
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration() #Imports : {Token t;} {
    (Import())*
}

void Import() #Import : {Token t; String importName = "";} {
    <IMPORT> t = <IDENTIFIER> {
        importName += t.image;
    } (<DOT> t = <IDENTIFIER> {
        importName += "." + t.image;
    })* <SEMICOLON>
    {
        jjtThis.put("module", importName);
    }
}

void ClassDeclaration() #Class : {Token t;} {
    <CLASS> t = <IDENTIFIER> { jjtThis.put("name", t.image); }(<EXTENDS> t = <IDENTIFIER> { jjtThis.put("extends", t.image); })? <LBR> (VarDeclaration())* (MethodDeclaration())* <RBR>
}

void VarDeclaration() #Variable: {Token t; String varType;} {
    varType = Type() t = <IDENTIFIER> <SEMICOLON>
    {
        jjtThis.put("type", varType);
        jjtThis.put("name", t.image);
    }
}

void MethodDeclaration() #void: {} {
    <PUBLIC> MethodDeclarationAux()
}

void MethodDeclarationAux() #Method: {} {
    (Type() <IDENTIFIER>  <LPAR> (Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*)?
    <RPAR> <LBR> (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RETURN> Expression() <SEMICOLON> <RBR>)
    | (<STATIC> <VOID> <MAIN> <LPAR> <STRING> <LSQBR> <RSQBR> <IDENTIFIER> <RPAR> <LBR>
    (LOOKAHEAD(2) VarDeclaration())* (Statement())* <RBR>)
}

String Type() #void: {Token t;} {
    (t = <INT> (<LSQBR> t = <RSQBR>)?) { if(t.image == "]") return "int[]"; else return "int"; }
    | t = <BOOLEAN> { return t.image; }
    | t = <IDENTIFIER> { return t.image; }

}

void Statement() : {} {
    (<LBR> (Statement())* <RBR>)
    | (<IF> <LPAR> Expression() <RPAR> Statement() <ELSE> Statement())
    | (
    try {
        <WHILE> <LPAR> Expression() <RPAR>
    }
    catch (ParseException ex) {
        Reports.store(new Report(ReportType.ERROR, Stage.SYNTATIC, ex.currentToken.endLine, ex.getMessage()));
        System.out.println(ex.getMessage());
        skipToStatement();
    } Statement())
    | LOOKAHEAD(2) Assignment() <SEMICOLON>
    | LOOKAHEAD(2) Expression() <SEMICOLON>
}

JAVACODE
void skipToStatement() {
    Token t;

    /*  Ignores tokens until a LBR token is found (but doesn't consume it) or until the last RPAR token is found
        in a chain of RPAR tokens */

    do {
        t = getNextToken();
    }
    while (getToken(1).kind != LBR && (t.kind != RPAR || getToken(1).kind == RPAR));
}

void Assignment() : {} {
    <IDENTIFIER> (<LSQBR> Expression() <RSQBR>)? <ASSIGN> Expression()
}

void Expression() : {} {
    ExpressionAnd()
}

void ExpressionAnd() #void : {} {
    ExpressionLess() (<AND> ExpressionLess() #And(2))*
}

void ExpressionLess() #void : {} {
    ExpressionAddSub() (<LT> ExpressionAddSub() #LessThan(2))*
}

void ExpressionAddSub() #void : {} {
    ExpressionMulDiv() ((<ADD> ExpressionMulDiv() #Add(2) | <SUB> ExpressionMulDiv() #Sub(2)))*
}

void ExpressionMulDiv() #void : {} {
    ExpressionNot() ((<MUL> ExpressionNot() #Mul(2) | <DIV> ExpressionNot() #Div(2)))*
}

void ExpressionNot() #void : {} {
    <NOT> ExpressionNot() #Not(1)
    | Primary()
}

void Primary() #void : { Token t; } {
    <LPAR> Expression() <RPAR> PrimaryL()
    | t = <INTEGER_LITERAL> { jjtThis.put("value", t.image); } #Int PrimaryL()
    | t = <IDENTIFIER> { jjtThis.put("name", t.image); } #Var PrimaryL()
    | <THIS> #This PrimaryL()
    | <NEW> #New ExpressionNew() PrimaryL()
    | <TRUE> #True PrimaryL()
    | <FALSE> #False PrimaryL()
}

void PrimaryL() #void : {} {
    <LSQBR> Expression() <RSQBR> PrimaryL()
    | <DOT> ExpressionDot() #Dot(2) PrimaryL()
    | {}
}

void ExpressionNew() : {} {
    <INT> <LSQBR> Expression() <RSQBR>
    | <IDENTIFIER> <LPAR> <RPAR>
}

void ExpressionDot() #void : {} {
    <IDENTIFIER> #Func <LPAR> (Expression() (<COMMA> Expression())*)? <RPAR>
    | <LENGTH> #Length
}
