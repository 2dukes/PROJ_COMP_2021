options {
    LOOKAHEAD = 2;
    FORCE_LA_CHECK = true;
}

PARSER_BEGIN(JMM)

import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class JMM {
    public static void main(String[] args) throws ParseException, FileNotFoundException {
        JMM jmm = new JMM(new FileInputStream(args[0]));
        SimpleNode root = jmm.Program(); // returns reference to root node

        root.dump(""); // prints the tree on the screen
    }
}

PARSER_END(JMM)

SKIP : {
    " " | "\r" | "\t" | "\n"
}

TOKEN : {
    <IMPORT: "import">
    | <CLASS: "class">
    | <EXTENDS: "extends">
    | <PUBLIC: "public">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <RETURN: "return">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <LENGTH: "length">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <IDENTIFIER: (["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])+ | ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z", "0"-"9", "_", "$"])*)>
    | <INTEGER_LITERAL: ["0"-"9"](["0"-"9"])*>
    | <ASSIGN: "=">
    | <LBR: "{">
    | <RBR: "}">
    | <LSQBR: "[">
    | <RSQBR: "]">
    | <LPAR: "(">
    | <RPAR: ")">
    | <DOT: ".">
    | <COMMA: ",">
    | <SEMICOLON: ";">
    | <AND: "&&">
    | <LT: "<">
    | <SUM: "+">
    | <SUB: "-">
    | <MUL: "*">
    | <DIV: "/">
    | <NOT: "!">
}

SimpleNode Program() : {} {
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration() : {} {
    (<IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER>)* <SEMICOLON>)*
}

void ClassDeclaration() : {} {
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? <LBR> (VarDeclaration())* (MethodDeclaration())* <RBR>
}

void VarDeclaration() : {} {
    Type() <IDENTIFIER> <SEMICOLON>
}

void MethodDeclaration() : {} {
    <PUBLIC> MethodDeclarationAux()
    // (<PUBLIC> Type() <IDENTIFIER> <LPAR> (Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*)?
    // <RPAR> <LBR> (VarDeclaration())* (Statement())* <RETURN> Expression() <SEMICOLON> <RBR>)
    // | (<PUBLIC> <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LSQBR> <RSQBR> <IDENTIFIER> <RPAR> <LBR>
    // (VarDeclaration())* (Statement())* <RBR>)
}

void MethodDeclarationAux() : {} {
    (Type() <IDENTIFIER> <LPAR> (Type() <IDENTIFIER> (<COMMA> Type() <IDENTIFIER>)*)?
    <RPAR> <LBR> (VarDeclaration())* (Statement())* <RETURN> Expression() <SEMICOLON> <RBR>)
    | (<STATIC> <VOID> <MAIN> <LPAR> <STRING> <LSQBR> <RSQBR> <IDENTIFIER> <RPAR> <LBR>
    (VarDeclaration())* (Statement())* <RBR>)
}

void Type() : {} {
    (<INT> (<LSQBR> <RSQBR>)?)
    | <BOOLEAN>
    | <IDENTIFIER>
}

void Statement() : {} {
    // (<IDENTIFIER> <LSQBR> Expression() <RSQBR> <ASSIGN> Expression() <SEMICOLON>)
    AuxiliarExpressionStatement()
    | (<LBR> (Statement())* <RBR>)
    | (<IF> <LPAR> Expression() <RPAR> Statement() <ELSE> Statement())
    | (<WHILE> <LPAR> Expression() <RPAR> Statement())
    // | (Expression() <SEMICOLON>)
    // | (<IDENTIFIER> StatementAssign())
}

void AuxiliarExpressionStatement() : {} {
    (<IDENTIFIER> AuxiliarExpressionLStatement()) // Changed line
    | <INTEGER_LITERAL> ExpressionL() <SEMICOLON>
    | <TRUE> ExpressionL() <SEMICOLON>
    | <FALSE> ExpressionL() <SEMICOLON>
    // | <IDENTIFIER> (ExpressionL() <SEMICOLON> | StatementAssign()) // Changed line
    | <THIS> ExpressionL() <SEMICOLON>
    | <NEW> ExpressionNew() <SEMICOLON>
    | <NOT> Expression() ExpressionL() <SEMICOLON>
    | <LPAR> Expression() <RPAR> ExpressionL() <SEMICOLON>
}

void AuxiliarExpressionLStatement() : {} {
    (<LSQBR> Expression() <RSQBR> (ExpressionL() <SEMICOLON> | <ASSIGN> Expression() <SEMICOLON>)) // Changed Line
    | ((<AND> | <LT> | <SUM> | <SUB> | <MUL> | <DIV>) Expression() ExpressionL() <SEMICOLON>)
    | <DOT> ExpressionLDot() <SEMICOLON>
    | (<ASSIGN> Expression() <SEMICOLON>)
    // | <LSQBR> Expression() <RSQBR> <ASSIGN> Expression() <SEMICOLON>)
    | {}
}

// void StatementAssign() : {} {
//     (<ASSIGN> Expression() <SEMICOLON> | <LSQBR> Expression() <RSQBR> <ASSIGN> Expression() <SEMICOLON>)
// }

void Expression() : {} {
    <INTEGER_LITERAL> ExpressionL()
    | <TRUE> ExpressionL()
    | <FALSE> ExpressionL()
    | <IDENTIFIER> ExpressionL()
    | <THIS> ExpressionL()
    | (<NEW> ExpressionNew())
    | (<NOT> Expression() ExpressionL())
    | (<LPAR> Expression() <RPAR> ExpressionL())
}

void ExpressionNew() : {} {
    (<INT> <LSQBR> Expression() <RSQBR> ExpressionL())
    | (<IDENTIFIER> <LPAR> <RPAR> ExpressionL())
}

void ExpressionL() : {} {
    ((<AND> | <LT> | <SUM> | <SUB> | <MUL> | <DIV>) Expression() ExpressionL())
    | (<LSQBR> Expression() <RSQBR> ExpressionL())
    | (<DOT> ExpressionLDot())
    | {}
}

void ExpressionLDot() : {} {
    (<IDENTIFIER> <LPAR> (Expression() (<COMMA> Expression())*)? <RPAR> ExpressionL())
    | (<LENGTH> ExpressionL())
}
